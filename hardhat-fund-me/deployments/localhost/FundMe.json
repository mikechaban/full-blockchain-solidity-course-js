{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd088554fd156ae19034598f98a9ac0cadda240f7ac38de9a6b3a3770714ae619",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1046167",
    "logsBloom": "0x
    "blockHash": "0xb288dcd4f8d58a41c95060ea600b9275ff9b5012fd85b5ae3cdd28c8aec5396c",
    "transactionHash": "0xd088554fd156ae19034598f98a9ac0cadda240f7ac38de9a6b3a3770714ae619",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1046167",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "3979211455327e8fcdc29f07fdc8b728",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mike Chabanovskyi\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Mike Chabanovskyi\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // Mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x3665e17bfb8a8f3dfcba9b9a6929a52cb5c49cb170f55468dacedb81693f170a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x2db90300e13d60d2acf51b7acccb3d1621cc8ff93000c0887fc4e4f80f9246dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001313380380620013138339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c61118d620001866000396000818161024c0152818161049b01528181610625015261081b015261118d6000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ae5565b6101dc565b6040516100bf9190610cdb565b60405180910390f35b3480156100d457600080fd5b506100dd610224565b6040516100ea9190610c80565b60405180910390f35b3480156100ff57600080fd5b5061010861024a565b005b34801561011657600080fd5b5061011f61048a565b60405161012c9190610cdb565b60405180910390f35b34801561014157600080fd5b5061014a610497565b6040516101579190610c65565b60405180910390f35b34801561016c57600080fd5b506101756104bf565b6040516101829190610c80565b60405180910390f35b6101936104e9565b005b61019d610623565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610b12565b6108b1565b6040516101d39190610c65565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102cf576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561037a576000600182815481106102f5576102f4611043565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037290610f9c565b9150506102d2565b50600067ffffffffffffffff81111561039657610395611072565b5b6040519080825280602002602001820160405280156103c45781602001602082028036833780820191505090505b50600190805190602001906103da9291906109d5565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161040190610c50565b60006040518083038185875af1925050503d806000811461043e576040519150601f19603f3d011682016040523d82523d6000602084013e610443565b606091505b5050905080610487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047e90610c9b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610528600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f990919063ffffffff16565b1015610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090610cbb565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b79190610d12565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e2575b5050505050905060005b81518110156107b657600082828151811061075457610753611043565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ae90610f9c565b915050610736565b50600067ffffffffffffffff8111156107d2576107d1611072565b5b6040519080825280602002602001820160405280156108005781602001602082028036833780820191505090505b50600190805190602001906108169291906109d5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085d90610c50565b60006040518083038185875af1925050503d806000811461089a576040519150601f19603f3d011682016040523d82523d6000602084013e61089f565b606091505b50509050806108ad57600080fd5b5050565b6000600182815481106108c7576108c6611043565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090583610935565b90506000670de0b6b3a7640000858361091e9190610eb0565b6109289190610d68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097e57600080fd5b505afa158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190610b3f565b5050509150506402540be400816109cd9190610d99565b915050919050565b828054828255906000526020600020908101928215610a4e579160200282015b82811115610a4d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f5565b5b509050610a5b9190610a5f565b5090565b5b80821115610a78576000816000905550600101610a60565b5090565b600081359050610a8b816110fb565b92915050565b600081519050610aa081611112565b92915050565b600081359050610ab581611129565b92915050565b600081519050610aca81611129565b92915050565b600081519050610adf81611140565b92915050565b600060208284031215610afb57610afa6110a1565b5b6000610b0984828501610a7c565b91505092915050565b600060208284031215610b2857610b276110a1565b5b6000610b3684828501610aa6565b91505092915050565b600080600080600060a08688031215610b5b57610b5a6110a1565b5b6000610b6988828901610ad0565b9550506020610b7a88828901610a91565b9450506040610b8b88828901610abb565b9350506060610b9c88828901610abb565b9250506080610bad88828901610ad0565b9150509295509295909350565b610bc381610f0a565b82525050565b610bd281610f66565b82525050565b6000610be5600b83610d01565b9150610bf0826110a6565b602082019050919050565b6000610c08601b83610d01565b9150610c13826110cf565b602082019050919050565b6000610c2b600083610cf6565b9150610c36826110f8565b600082019050919050565b610c4a81610f46565b82525050565b6000610c5b82610c1e565b9150819050919050565b6000602082019050610c7a6000830184610bba565b92915050565b6000602082019050610c956000830184610bc9565b92915050565b60006020820190508181036000830152610cb481610bd8565b9050919050565b60006020820190508181036000830152610cd481610bfb565b9050919050565b6000602082019050610cf06000830184610c41565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d1d82610f46565b9150610d2883610f46565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5d57610d5c610fe5565b5b828201905092915050565b6000610d7382610f46565b9150610d7e83610f46565b925082610d8e57610d8d611014565b5b828204905092915050565b6000610da482610f1c565b9150610daf83610f1c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dee57610ded610fe5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e2b57610e2a610fe5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e6857610e67610fe5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ea557610ea4610fe5565b5b828202905092915050565b6000610ebb82610f46565b9150610ec683610f46565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eff57610efe610fe5565b5b828202905092915050565b6000610f1582610f26565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f7182610f78565b9050919050565b6000610f8382610f8a565b9050919050565b6000610f9582610f26565b9050919050565b6000610fa782610f46565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fda57610fd9610fe5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61110481610f0a565b811461110f57600080fd5b50565b61111b81610f1c565b811461112657600080fd5b50565b61113281610f46565b811461113d57600080fd5b50565b61114981610f50565b811461115457600080fd5b5056fea2646970667358221220e6a7d65f00d91e92aa1aaa9afc48c92f532b93a9e6068edef1c03faae6ad2b6f64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ae5565b6101dc565b6040516100bf9190610cdb565b60405180910390f35b3480156100d457600080fd5b506100dd610224565b6040516100ea9190610c80565b60405180910390f35b3480156100ff57600080fd5b5061010861024a565b005b34801561011657600080fd5b5061011f61048a565b60405161012c9190610cdb565b60405180910390f35b34801561014157600080fd5b5061014a610497565b6040516101579190610c65565b60405180910390f35b34801561016c57600080fd5b506101756104bf565b6040516101829190610c80565b60405180910390f35b6101936104e9565b005b61019d610623565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610b12565b6108b1565b6040516101d39190610c65565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102cf576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561037a576000600182815481106102f5576102f4611043565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037290610f9c565b9150506102d2565b50600067ffffffffffffffff81111561039657610395611072565b5b6040519080825280602002602001820160405280156103c45781602001602082028036833780820191505090505b50600190805190602001906103da9291906109d5565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161040190610c50565b60006040518083038185875af1925050503d806000811461043e576040519150601f19603f3d011682016040523d82523d6000602084013e610443565b606091505b5050905080610487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047e90610c9b565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610528600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f990919063ffffffff16565b1015610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090610cbb565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b79190610d12565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e2575b5050505050905060005b81518110156107b657600082828151811061075457610753611043565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ae90610f9c565b915050610736565b50600067ffffffffffffffff8111156107d2576107d1611072565b5b6040519080825280602002602001820160405280156108005781602001602082028036833780820191505090505b50600190805190602001906108169291906109d5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085d90610c50565b60006040518083038185875af1925050503d806000811461089a576040519150601f19603f3d011682016040523d82523d6000602084013e61089f565b606091505b50509050806108ad57600080fd5b5050565b6000600182815481106108c7576108c6611043565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090583610935565b90506000670de0b6b3a7640000858361091e9190610eb0565b6109289190610d68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097e57600080fd5b505afa158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190610b3f565b5050509150506402540be400816109cd9190610d99565b915050919050565b828054828255906000526020600020908101928215610a4e579160200282015b82811115610a4d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f5565b5b509050610a5b9190610a5f565b5090565b5b80821115610a78576000816000905550600101610a60565b5090565b600081359050610a8b816110fb565b92915050565b600081519050610aa081611112565b92915050565b600081359050610ab581611129565b92915050565b600081519050610aca81611129565b92915050565b600081519050610adf81611140565b92915050565b600060208284031215610afb57610afa6110a1565b5b6000610b0984828501610a7c565b91505092915050565b600060208284031215610b2857610b276110a1565b5b6000610b3684828501610aa6565b91505092915050565b600080600080600060a08688031215610b5b57610b5a6110a1565b5b6000610b6988828901610ad0565b9550506020610b7a88828901610a91565b9450506040610b8b88828901610abb565b9350506060610b9c88828901610abb565b9250506080610bad88828901610ad0565b9150509295509295909350565b610bc381610f0a565b82525050565b610bd281610f66565b82525050565b6000610be5600b83610d01565b9150610bf0826110a6565b602082019050919050565b6000610c08601b83610d01565b9150610c13826110cf565b602082019050919050565b6000610c2b600083610cf6565b9150610c36826110f8565b600082019050919050565b610c4a81610f46565b82525050565b6000610c5b82610c1e565b9150819050919050565b6000602082019050610c7a6000830184610bba565b92915050565b6000602082019050610c956000830184610bc9565b92915050565b60006020820190508181036000830152610cb481610bd8565b9050919050565b60006020820190508181036000830152610cd481610bfb565b9050919050565b6000602082019050610cf06000830184610c41565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d1d82610f46565b9150610d2883610f46565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5d57610d5c610fe5565b5b828201905092915050565b6000610d7382610f46565b9150610d7e83610f46565b925082610d8e57610d8d611014565b5b828204905092915050565b6000610da482610f1c565b9150610daf83610f1c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dee57610ded610fe5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e2b57610e2a610fe5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e6857610e67610fe5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ea557610ea4610fe5565b5b828202905092915050565b6000610ebb82610f46565b9150610ec683610f46565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eff57610efe610fe5565b5b828202905092915050565b6000610f1582610f26565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f7182610f78565b9050919050565b6000610f8382610f8a565b9050919050565b6000610f9582610f26565b9050919050565b6000610fa782610f46565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fda57610fd9610fe5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61110481610f0a565b811461110f57600080fd5b50565b61111b81610f1c565b811461112657600080fd5b50565b61113281610f46565b811461113d57600080fd5b50565b61114981610f50565b811461115457600080fd5b5056fea2646970667358221220e6a7d65f00d91e92aa1aaa9afc48c92f532b93a9e6068edef1c03faae6ad2b6f64736f6c63430008070033",
  "devdoc": {
    "author": "Mike Chabanovskyi",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}